{"version":3,"sources":["index.js"],"names":["Button","props","className","onClick","purpose","OutputScreen","class","this","operand1","currentNumber","operator","React","Component","ButtonBox","cssClass","renderOperandButton","renderOperatorButton","Calculator","handleClick","operationHandler","state","setState","n","isNaN","parseFloat","isFinite","evaluate","id","ReactDOM","render","document","getElementById"],"mappings":"iNAQA,SAASA,EAAOC,GACd,OACE,wBAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAME,QAAnD,SACGF,EAAMG,U,IAKPC,E,4JACJ,WACE,OACE,sBAAKC,MAAM,kBAAX,UACE,8BACGC,KAAKN,MAAMO,WAEd,gCACGD,KAAKN,MAAMQ,cAAeF,KAAKN,MAAMS,mB,GARrBC,IAAMC,WAe3BC,E,yKACJ,SAAoBT,GAAoC,IAAD,OAA1BU,EAA0B,uDAAjB,gBACpC,OACE,cAACd,EAAD,CACEI,QAASA,EACTD,QAAS,kBAAM,EAAKF,MAAME,QAAQC,IAClCF,UAAWY,M,kCAKjB,SAAqBV,GAAU,IAAD,OAC5B,OACE,cAACJ,EAAD,CACEI,QAASA,EACTD,QAAS,kBAAM,EAAKF,MAAME,QAAQC,IAClCF,UAAU,qB,oBAIhB,WACE,OACE,gCACE,gCACGK,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKS,qBAAqB,KAC1BT,KAAKS,qBAAqB,QAE7B,gCACGT,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKS,qBAAqB,KAC1BT,KAAKS,qBAAqB,QAE7B,gCACGT,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKQ,oBAAoB,GACzBR,KAAKS,qBAAqB,KAC1BT,KAAKS,qBAAqB,QAE7B,8BACGT,KAAKQ,oBAAoB,EAAG,uB,GA7CfJ,IAAMC,WAoDxBK,E,kDACJ,WAAYhB,GAAQ,IAAD,8BACjB,cAAMA,IA2DRiB,YAAc,SAACd,GACb,EAAKe,iBAAiBf,IA3DtB,EAAKgB,MAAQ,CACXX,cAAe,EACfD,SAAU,EACVE,SAAU,IALK,E,4CASnB,WACE,OAAOH,KAAKa,MAAMV,UAChB,IAAK,IACHH,KAAKc,SAAS,CAACZ,cAAeF,KAAKa,MAAMZ,SAAWD,KAAKa,MAAMX,gBAC/D,MACF,IAAK,IACHF,KAAKc,SAAS,CAACZ,cAAeF,KAAKa,MAAMZ,SAAWD,KAAKa,MAAMX,gBAC/D,MACF,IAAK,IACHF,KAAKc,SAAS,CAACZ,cAAeF,KAAKa,MAAMZ,SAAWD,KAAKa,MAAMX,gBAC/D,MACF,IAAK,IACHF,KAAKc,SAAS,CAACZ,cAAeF,KAAKa,MAAMZ,SAAWD,KAAKa,MAAMX,mB,8BAKrE,SAAiBL,GACf,GA3GekB,EA2GFlB,GA1GPmB,MAAMC,WAAWF,KAAOG,SAASH,GA0GhB,CACrB,GAAGf,KAAKa,MAAMX,cAAgB,gBAC5B,OAAO,EAGPF,KAAKc,SAAS,CAACZ,cAA0C,GAA3BF,KAAKa,MAAMX,cAAqBL,SAG7D,GAAe,MAAZA,EACNG,KAAKmB,WACLnB,KAAKc,SACH,CAACX,SAAU,GACXF,SAAU,SAET,GAAe,MAAZJ,EACNG,KAAKc,SACH,CAACX,SAAU,GACXF,SAAU,EACVC,cAAe,UAEd,CACH,GAA2B,KAAxBF,KAAKa,MAAMV,SACZ,OAAO,EAGPH,KAAKc,SACH,CAACX,SAAUN,EACXI,SAAUD,KAAKa,MAAMX,cACrBA,cAAe,IAvIzB,IAAmBa,I,oBAgJjB,WACE,OACE,sBAAKK,GAAG,aAAR,UACE,8BACE,cAACtB,EAAD,CACAI,cAAiBF,KAAKa,MAAMX,cAC5BD,SAAYD,KAAKa,MAAMZ,SACvBE,SAAYH,KAAKa,MAAMV,aAEzB,8BACE,cAACG,EAAD,CACAV,QAAWI,KAAKW,uB,GA5EDP,IAAMC,WAmF/BgB,IAASC,OAAO,cAACZ,EAAD,IAAgBa,SAASC,eAAe,W","file":"static/js/main.6a27823a.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction Button(props) {\n  return (\n    <button className={props.className} onClick={props.onClick}>\n      {props.purpose}\n    </button>\n  )\n}\n\nclass OutputScreen extends React.Component {\n  render() {\n    return(\n      <div class=\"outputContainer\">\n        <div>\n          {this.props.operand1}\n        </div>\n        <div>\n          {this.props.currentNumber}{this.props.operator}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass ButtonBox extends React.Component {\n  renderOperandButton(purpose, cssClass=\"operandButton\") {\n    return (\n      <Button\n        purpose={purpose}\n        onClick={() => this.props.onClick(purpose)}\n        className={cssClass}\n      />\n    )\n  }\n\n  renderOperatorButton(purpose) {\n    return (\n      <Button\n        purpose={purpose}\n        onClick={() => this.props.onClick(purpose)}\n        className=\"operatorButton\"/>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.renderOperandButton(7)}\n          {this.renderOperandButton(8)}\n          {this.renderOperandButton(9)}\n          {this.renderOperatorButton(\"+\")}\n          {this.renderOperatorButton(\"-\")}\n        </div>\n        <div>\n          {this.renderOperandButton(4)}\n          {this.renderOperandButton(5)}\n          {this.renderOperandButton(6)}\n          {this.renderOperatorButton(\"*\")}\n          {this.renderOperatorButton(\"c\")}\n        </div>\n        <div>\n          {this.renderOperandButton(1)}\n          {this.renderOperandButton(2)}\n          {this.renderOperandButton(3)}\n          {this.renderOperatorButton(\"/\")}\n          {this.renderOperatorButton(\"=\")}\n        </div>\n        <div>\n          {this.renderOperandButton(0, \"zeroButton\")}\n        </div>\n      </div>\n    )\n  }\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      currentNumber: 0,\n      operand1: 0,\n      operator: \"\",\n    }\n  }\n\n  evaluate() {\n    switch(this.state.operator) {\n      case \"+\":\n        this.setState({currentNumber: this.state.operand1 + this.state.currentNumber});\n        break;\n      case \"-\":\n        this.setState({currentNumber: this.state.operand1 - this.state.currentNumber})\n        break;\n      case \"*\":\n        this.setState({currentNumber: this.state.operand1 * this.state.currentNumber});\n        break;\n      case \"/\":\n        this.setState({currentNumber: this.state.operand1 / this.state.currentNumber});\n        break;\n    }\n  }\n\n  operationHandler(purpose) {\n    if(isNumeric(purpose)) {\n      if(this.state.currentNumber > 999999999999999) {\n        return true;\n      }\n      else {\n        this.setState({currentNumber: this.state.currentNumber * 10 + purpose});\n      }\n    }\n    else if(purpose === \"=\") {\n      this.evaluate();\n      this.setState(\n        {operator: \"\",\n        operand1: 0});\n    }\n    else if(purpose === \"c\") {\n      this.setState(\n        {operator: \"\",\n        operand1: 0,\n        currentNumber: \"0\"});\n    }\n    else {\n      if(this.state.operator !== \"\") {\n        return true;\n      }\n      else {\n        this.setState(\n          {operator: purpose,\n          operand1: this.state.currentNumber,\n          currentNumber: 0});\n      }\n    }\n  }\n\n  handleClick = (purpose) => {\n    this.operationHandler(purpose)\n  };\n\n  render () {\n    return (\n      <div id=\"calculator\">\n        <div>\n          <OutputScreen \n          currentNumber = {this.state.currentNumber}\n          operand1 = {this.state.operand1}\n          operator = {this.state.operator}/>\n        </div>\n        <div>\n          <ButtonBox\n          onClick = {this.handleClick}/>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Calculator />, document.getElementById('root'));\n"],"sourceRoot":""}